name: daily-episodes
on:
  schedule:
    - cron: "0 15 * * *"
  workflow_dispatch:
permissions:
  contents: write

jobs:
  episode:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        series: [ai_teacher, ai_drama, ai_memes]
    concurrency:
      group: daily-${{ matrix.series }}
      cancel-in-progress: false
    timeout-minutes: 40

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('infra/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: pip install -r infra/requirements.txt

      - name: Install FFmpeg & fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      # ----------------- PULL STOCK CACHE FROM gh-pages -----------------
      - name: Checkout gh-pages into site/
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: site

      - name: Seed local stock library from cache
        run: |
          mkdir -p assets/stock/${{ matrix.series }}
          if [ -d "site/stock/${{ matrix.series }}" ]; then
            rsync -a "site/stock/${{ matrix.series }}/" "assets/stock/${{ matrix.series }}/" || true
          fi
          if [ -d "site/stock/common" ]; then
            mkdir -p assets/stock/common
            rsync -a "site/stock/common/" "assets/stock/common/" || true
          fi

      # ----------------- CURRICULUM & PLANNING -----------------
      - name: Stage curriculum (placeholder ok)
        env:
          SERIES: ${{ matrix.series }}
        run: python curriculum/extract_unit.py --series "$SERIES"

      - name: Plan episode
        env:
          SERIES: ${{ matrix.series }}
        run: python planner/plan_next.py --series "$SERIES"

      - name: Director Agent
        env:
          SERIES: ${{ matrix.series }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: gpt-4o
        run: python planner/agent_director.py --series "$SERIES"

      # ----------------- FETCH NEW STOCK VIA APIs -----------------
      - name: Fetch stock clips (Pexels/Pixabay)
        env:
          SERIES: ${{ matrix.series }}
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
        run: python generator/fetch_stock.py --series "$SERIES" --max_new 4 --per_query 8

      # Push any newly fetched clips to gh-pages cache for future runs
      - name: Push new stock to gh-pages cache
        run: |
          set -e
          mkdir -p site/stock/${{ matrix.series }}
          shopt -s nullglob
          newfiles=(assets/stock/${{ matrix.series }}/*.mp4)
          if [ ${#newfiles[@]} -gt 0 ]; then
            cp -n assets/stock/${{ matrix.series }}/*.mp4 site/stock/${{ matrix.series }}/ || true
          fi
          # (optional common dir)
          if [ -d assets/stock/common ]; then
            mkdir -p site/stock/common
            cp -n assets/stock/common/*.mp4 site/stock/common/ 2>/dev/null || true
          fi

          cd site
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "stock/${{ matrix.series }}" "stock/common" || true
          git commit -m "stock cache update (${{ matrix.series }}) from run ${{ github.run_id }}" || echo "nothing to commit"
          git push origin HEAD:gh-pages

      # ----------------- GENERATE CORE ASSETS -----------------
      - name: Generate assets (OpenAI TTS)
        env:
          SERIES: ${{ matrix.series }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_TTS_MODEL: gpt-4o-mini-tts
          OPENAI_TTS_VOICE: verse
        run: python generator/gen_assets.py --series "$SERIES"

      - name: Generate fallback background (animated color)
        env:
          SERIES: ${{ matrix.series }}
        run: python generator/gen_background.py --series "$SERIES"

      - name: Shot list from narration
        env:
          SERIES: ${{ matrix.series }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: gpt-4o
        run: python planner/make_shotlist.py --series "$SERIES"

      - name: Route shots via adapters â†’ visuals.mp4
        env:
          SERIES: ${{ matrix.series }}
          PYTHONPATH: ${{ github.workspace }}
        run: python generator/route_shots.py --series "$SERIES"


      - name: Select stock clips (from library)
        env:
          SERIES: ${{ matrix.series }}
        run: python generator/select_stock.py --series "$SERIES" --max_clips 6

      - name: Cut visuals from stock (to narration length)
        env:
          SERIES: ${{ matrix.series }}
        run: python assembly/cut_visuals.py --series "$SERIES"
      
      - name: Debug visuals existence
        run: |
          ls -l out/${{ matrix.series }}/ep_*/assets/visuals.mp4 || echo "no visuals.mp4"

      - name: Make captions (SRT)
        env:
          SERIES: ${{ matrix.series }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python generator/make_srt.py --series "$SERIES"

      - name: Assemble video (prefers visuals.mp4)
        env:
          SERIES: ${{ matrix.series }}
        run: python assembly/build_video.py --series "$SERIES"

      - name: Validate video
        env:
          SERIES: ${{ matrix.series }}
        run: python assembly/validate_video.py --series "$SERIES"

      - name: Debug list outputs
        if: always()
        run: |
          echo "Tree for series=${{ matrix.series }}:"
          find out/${{ matrix.series }} -maxdepth 3 -type f -print || true

      # ----------------- FIND & PUBLISH -----------------
      - name: Resolve MP4 from plan.json
        id: mp4
        run: |
          python - <<'PY'
          import json, os
          from pathlib import Path

          series = "${{ matrix.series }}"
          outdir = Path("out") / series

          found = False
          path = ""

          plans = sorted(outdir.glob("ep_*/plan.json"))
          if plans:
            plan = json.loads(plans[-1].read_text(encoding="utf-8"))
            vid = plan.get("video_path", "")
            if vid and Path(vid).exists():
              found = True
              path = vid

          if not found:
            finals = sorted((outdir / "final").glob("*.mp4"))
            if finals:
              found = True
              path = str(finals[-1])

          # set real step outputs
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"found={'true' if found else 'false'}\n")
            if found:
              f.write(f"file={path}\n")

          # also echo for logs
          print(f"found={'true' if found else 'false'}")
          if found:
            print(f"file={path}")
          PY

      - name: Publish MP4 to gh-pages
        id: publish_url
        if: ${{ steps.mp4.outputs.found == 'true' && steps.vis.outputs.skip != 'true' && !cancelled() }}
        run: |
          set -e
          FILE="${{ steps.mp4.outputs.file }}"
          # Make a unique, cache-busting name per run (series-runId.mp4)
          NAME="${{ matrix.series }}-${{ github.run_id }}.mp4"

          mkdir -p site/reels/${{ matrix.series }}
          cp "$FILE" "site/reels/${{ matrix.series }}/$NAME"

          cd site
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "reels/${{ matrix.series }}/$NAME"
          git commit -m "reel: $NAME (${{ matrix.series }}) from run ${{ github.run_id }}" || true

          # Avoid non-fast-forward errors if multiple jobs push gh-pages:
          git pull --rebase origin gh-pages || true
          git push

          echo "url=https://omeedilyas.github.io/ai-show-starter/reels/${{ matrix.series }}/$NAME" >> "$GITHUB_OUTPUT"


      # ---- Real Instagram only for ai_teacher (keep others dry) ----
      - name: Echo reel URL (ai_teacher)
        if: ${{ matrix.series == 'ai_teacher' && steps.mp4.outputs.found == 'true' && steps.publish_url.outputs.url != '' && !cancelled() }}
        run: |
          echo "Posting URL: ${{ steps.publish_url.outputs.url }}"

      - name: Post to Instagram (ai_teacher) â€” REAL
        if: ${{ matrix.series == 'ai_teacher' && steps.mp4.outputs.found == 'true' && steps.publish_url.outputs.url != '' && !cancelled() }}
        env:
          IG_ACCESS_TOKEN: ${{ secrets.IG_ACCESS_TOKEN }}
          IG_USER_ID: ${{ secrets.IG_USER_ID }}
        run: |
          set -euo pipefail
          python -u publisher/post_instagram.py "${{ steps.publish_url.outputs.url }}" "Daily episode ðŸš€ #ai #reels #${{ matrix.series }}"

      # ---- Keep aggregator as DRY marker ----
      - name: Publish (DRY RUN aggregate)
        if: ${{ !cancelled() }}
        env:
          SERIES: ${{ matrix.series }}
          DRY_RUN: "true"
          IG_ACCESS_TOKEN: ${{ secrets.IG_ACCESS_TOKEN }}
        run: python publisher/post_all.py --series "$SERIES"

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.series }}-output
          path: out/${{ matrix.series }}/final/*.mp4

      - name: Collect analytics (non-blocking)
        if: always()
        run: python analytics/pull_metrics.py --series "$SERIES" || true
