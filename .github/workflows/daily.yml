name: daily-episodes
on:
  schedule:
    - cron: "0 15 * * *"
  workflow_dispatch:
permissions:
  contents: write

jobs:
  episode:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        series: [ai_teacher, ai_drama, ai_memes]
    concurrency:
      group: daily-${{ matrix.series }}
      cancel-in-progress: false
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('infra/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: pip install -r infra/requirements.txt

      - name: Install FFmpeg & fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      # ---------- PLAN & GENERATE ----------
      - name: Plan episode
        env: { SERIES: ${{ matrix.series }} }
        run: python planner/plan_next.py --series "$SERIES"

      - name: Director Agent
        env:
          SERIES: ${{ matrix.series }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: gpt-4o
        run: python planner/agent_director.py --series "$SERIES"

      - name: Generate assets (OpenAI TTS)
        env:
          SERIES: ${{ matrix.series }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_TTS_MODEL: gpt-4o-mini-tts
          OPENAI_TTS_VOICE: verse
        run: python generator/gen_assets.py --series "$SERIES"

      - name: Generate background (animated)
        env: { SERIES: ${{ matrix.series }} }
        run: python generator/gen_background.py --series "$SERIES"

      - name: Select stock clips (local library)
        env: { SERIES: ${{ matrix.series }} }
        run: python generator/select_stock.py --series "$SERIES" --max_clips 6

      - name: Cut visuals from stock (to narration length)
        env: { SERIES: ${{ matrix.series }} }
        run: python assembly/cut_visuals.py --series "$SERIES"

      - name: Make captions (Whisper if available)
        env:
          SERIES: ${{ matrix.series }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python generator/make_srt.py --series "$SERIES"

      - name: Assemble video (prefers visuals.mp4)
        env: { SERIES: ${{ matrix.series }} }
        run: python assembly/build_video.py --series "$SERIES"

      - name: Validate video
        env: { SERIES: ${{ matrix.series }} }
        run: python assembly/validate_video.py --series "$SERIES"

      - name: Debug: list out dir (always)
        if: always()
        run: |
          echo "Tree for series=${{ matrix.series }}:"
          find out/${{ matrix.series }} -maxdepth 3 -type f -print || true
      # ---------- /PLAN & GENERATE ----------

      # ---------- GUARDS ----------
      - name: Guard â€” repo visibility
        id: vis
        env: { GH_TOKEN: ${{ github.token }} }
        run: |
          PRIV=$(gh api repos/${{ github.repository }} --jq .private)
          if [ "$PRIV" = "true" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Guard â€” IG quota (24h)
        id: quota
        env:
          IG_ACCESS_TOKEN: ${{ secrets.IG_ACCESS_TOKEN }}
          IG_USER_ID: ${{ secrets.IG_USER_ID }}
        run: |
          python - <<'PY'
          import os, requests, json
          token = os.environ.get("IG_ACCESS_TOKEN"); igid  = os.environ.get("IG_USER_ID")
          allow=False; remaining=0
          if token and igid:
            r = requests.get(f"https://graph.facebook.com/v19.0/{igid}/content_publishing_limit",
                             params={"fields":"quota_usage,config","access_token":token}, timeout=30)
            data = r.json()
            try:
              row = (data.get("data") or [{}])[0]
              usage = int(row.get("quota_usage", 0))
              cfg = (row.get("config") or [{}])[0]
              total = int(cfg.get("quota_total", 100))
              remaining = max(total-usage, 0); allow = remaining>0
              print(f"[guard] IG quota used={usage}/{total} remaining={remaining}")
            except Exception: print("[guard] unexpected:", json.dumps(data))
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"allow={'true' if allow else 'false'}\n")
            f.write(f"remaining={remaining}\n")
          PY
      # ---------- /GUARDS ----------

      # ---------- PUBLISH (robust) ----------
      - name: Find latest MP4
        id: mp4
        run: |
          set -e
          shopt -s nullglob
          files=(out/${{ matrix.series }}/final/*.mp4)
          if [ ${#files[@]} -eq 0 ]; then
            echo "found=false" >> "$GITHUB_OUTPUT"; exit 0
          fi
          latest=$(ls -t out/${{ matrix.series }}/final/*.mp4 | head -n 1)
          echo "found=true" >> "$GITHUB_OUTPUT"
          echo "file=$latest" >> "$GITHUB_OUTPUT"

      - name: Checkout gh-pages
        if: ${{ steps.mp4.outputs.found == 'true' && steps.vis.outputs.skip != 'true' && !cancelled() }}
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: site

      - name: Publish MP4 to gh-pages
        id: publish_url
        if: ${{ steps.mp4.outputs.found == 'true' && steps.vis.outputs.skip != 'true' && !cancelled() }}
        run: |
          set -e
          FILE="${{ steps.mp4.outputs.file }}"
          NAME=$(basename "$FILE")
          mkdir -p site/reels/${{ matrix.series }}
          cp "$FILE" "site/reels/${{ matrix.series }}/$NAME"
          cd site
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "reels/${{ matrix.series }}/$NAME"
          git commit -m "reel: $NAME (${{ matrix.series }}) from run ${{ github.run_id }}" || true
          git push
          echo "url=https://omeedilyas.github.io/ai-show-starter/reels/${{ matrix.series }}/$NAME" >> "$GITHUB_OUTPUT"

      - name: Post to Instagram (ai_teacher only) â€” REAL
        if: ${{ matrix.series == 'ai_teacher' && steps.mp4.outputs.found == 'true' && steps.vis.outputs.skip != 'true' && steps.quota.outputs.allow == 'true' && !cancelled() }}
        env:
          IG_ACCESS_TOKEN: ${{ secrets.IG_ACCESS_TOKEN }}
          IG_USER_ID: ${{ secrets.IG_USER_ID }}
        run: |
          python publisher/post_instagram.py "${{ steps.publish_url.outputs.url }}" "Daily episode ðŸš€ #ai #reels #${{ matrix.series }}"
      # ---------- /PUBLISH ----------

      - name: Publish (DRY RUN aggregate)
        if: ${{ !cancelled() }}
        env:
          SERIES: ${{ matrix.series }}
          DRY_RUN: "true"
          IG_APP_ID: ${{ secrets.IG_APP_ID }}
          IG_APP_SECRET: ${{ secrets.IG_APP_SECRET }}
          IG_ACCESS_TOKEN: ${{ secrets.IG_ACCESS_TOKEN }}
          IG_PAGE_ID: ${{ secrets.IG_PAGE_ID }}
          TIKTOK_API_KEY: ${{ secrets.TIKTOK_API_KEY }}
        run: python publisher/post_all.py --series "$SERIES"

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.series }}-output
          path: out/${{ matrix.series }}/final/*.mp4

      - name: Collect analytics (non-blocking)
        if: always()
        run: python analytics/pull_metrics.py --series "$SERIES" || true