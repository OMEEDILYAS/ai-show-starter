name: Build vendor wheels  # Human-readable workflow name shown in Actions UI

on:                        # Triggers for this workflow
  workflow_dispatch: {}    # Allow manual runs from the Actions tab

permissions:               # Needed if you want to auto-commit wheels back to the repo
  contents: write          # Grants push permission to GITHUB_TOKEN

jobs:
  build-linux-wheels:      # Single job that downloads manylinux wheels
    runs-on: ubuntu-latest # Use GitHub’s Ubuntu runner (matches our prod env)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4           # Pulls your repo so we can write vendor/wheels
        with:
          fetch-depth: 1                    # Shallow fetch is faster

      - name: Set up Python 3.11
        uses: actions/setup-python@v5       # Installs Python into the runner
        with:
          python-version: "3.11"            # We target CPython 3.11 for all wheels

      - name: Upgrade pip + wheel
        run: |
          python -m pip install --upgrade pip wheel  # Ensure latest pip resolver + wheel support
        shell: bash                                  # Run with bash (default on Ubuntu)

      - name: Prep vendor directory (clean old wheels)
        run: |
          mkdir -p vendor/wheels        # Create the destination folder if it doesn’t exist
          rm -f vendor/wheels/*.whl || true  # Remove any old .whl to avoid stale leftovers
        shell: bash

      - name: Download manylinux wheels
        run: |
          # IMPORTANT: no inline comments on continued lines; each package on its own line.
          # The --only-binary=:all: flag forces pip to choose prebuilt wheels (no source builds).
          pip download --only-binary=:all: --no-deps --dest vendor/wheels \
            plotly \
            kaleido \
            moderngl \
            moderngl-window \
            vpython
        shell: bash

      - name: List wheels (for debugging)
        run: |
          echo "== wheels =="
          ls -al vendor/wheels             # Show what we downloaded so you can verify in the logs
        shell: bash

      - name: Commit wheels back to repo
        run: |
          # Configure bot identity for this commit.
          git config user.name  "github-actions[bot]"              # Set committer name
          git config user.email "github-actions[bot]@users.noreply.github.com"  # Set committer email
          # Stage any new or changed .whl files.
          git add vendor/wheels/*.whl || true                      # Add wheels (if present)
          # Only commit if there is an actual diff (avoids empty commit failures).
          if ! git diff --cached --quiet; then                     # Check if anything is staged
            git commit -m "vendor: refresh wheels (plotly/kaleido/moderngl/vpython)"  # Create commit
            git push                                               # Push to the current branch
          else
            echo "No wheel changes to commit."                     # Nothing new; keep job green
          fi
        shell: bash
