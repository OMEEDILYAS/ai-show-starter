turn to algorithms for computing sample Nash equilibria, notwithstandingthediscouragingcomputationalcomplexityofthisproblem. Westartwiththe Lemke–Howson Lemke–Howson algorithm, for two reasons. First, it is the best known algorithm algorithm for the two-player, general-sum case (however, it must be said, not the fastest algorithm, experimentally speaking). Second, it provides insight into the structure of Nash equilibria, and indeed constitutes an independent, constructive proof of Nash’stheorem(Theorem3.3.22). TheLCPformulation Unlikeinthespecialzero-sumcase,theproblemoffindingasampleNashequilibriumcannotbeformulatedasalinearprogram. However,theproblemoffindinga Nashequilibriumofatwo-player,general-sumgamecanbeformulatedasalinear linear complementarityproblem(LCP).Inthissectionweshowhowtoconstructthisforcomplementarity mulationbystartingwith theslackvariableformulationgiveninEquations(4.9)– problem(LCP) (4.12). After giving the formulation, we present the Lemke–Howson algorithm, whichcanbeusedtosolvethisLCP. Asitturnsout,ourLCPwillhavenoobjectivefunctionatall,andisthusaconfeasibility straint satisfaction problem, or a feasibility program, rather than an optimization program problem. Also, we can no longer determine one player’s equilibrium strategy by only considering the other player’s payoff; instead, we will need to discuss both playersexplicitly. TheLCPforcomputingtheNashequilibriumofageneral-sum two-playergamefollows. u (aj,ak) sk+rj = U∗ j A (4.14) 1 1 2 · 2 1 1 ∀ ∈ 1 k X ∈A2 u (aj,ak) sj +rk = U∗ k A (4.15) 2 1 2 · 1 2 2 ∀ ∈ 2 j X ∈A1 sj =1, sk = 1 (4.16) 1 2 j X ∈A1 k X ∈A2 sj 0, sk 0 j A , k A (4.17) 1 ≥ 2 ≥ ∀ ∈ 1 ∀ ∈ 2 rj 0, rk 0 j A , k A (4.18) 1 ≥ 2 ≥ ∀ ∈ 1 ∀ ∈ 2 rj sj = 0, rk sk = 0 j A , k A (4.19) 1· 1 2 · 2 ∀ ∈ 1 ∀ ∈ 2 ObservethatthisformulationbearsastrongresemblancetotheLPformulation withslackvariablesgivenearlierinEquations(4.9)–(4.12). Letusgothroughthe Freeforon-screenuse;pleasedonotdistribute.Youcangetanotherfreecopy ofthisPDFororderthebookathttp://www.masfoundations.org. 94 4 ComputingSolutionConceptsofNormal-FormGames differences. First, asdiscussedearliertheLCPhasnoobjectivefunction. Second, constraint(4.14) is the same as constraint(4.10) in ourLP formulation; however, here we also include constraint (4.15) which constrains player 2’s actions in the same way. We also give the standard constraints that probabilities sum to one (4.16), that probabilities are nonnegative (4.17) and that slack variables are nonnegative(4.18),butnowstatetheseconstraintsforbothplayersratherthanonlyfor player1. Ifweincludedonlyconstraints(4.14)–(4.18)), wewouldstillhavealinearprogram. However, we would also have a flaw in our formulation: the variables U∗ 1 and U∗ would be insufficiently constrained. We wantthese values to expressthe 2 expected utility that each player would achieve by playing his best response to the other player’s chosen mixed strategy. However, with the constraints we have describedso far, U∗ and U∗ would be allowed to take unboundedlylarge values, 1 2 becausealloftheseconstraintsremainsatisfiedwhenbothU∗andrj areincreased i i bythesameconstant,foranygiveniandj. Wesolvethisproblembyaddingthe complementarity nonlinearconstraint(4.19),calledthecomplementaritycondition. Theadditionof condition thisconstraintmeansthatwenolongerhavealinearprogram;instead,wehavea linearcomplementarityproblem. Why does the complementarity condition fix our problem formulation? This constraintrequiresthat wheneveran action is played by a givenplayerwith positiveprobability(i.e.,wheneveranactionisinthesupportofagivenplayer’smixed strategy) then the corresponding slack variable must be zero. Under this requirement, each slack variable can be viewed as the player’s incentiveto deviate from the corresponding action. Thus, the complementarity condition captures the fact that, in equilibrium, all strategies that are played with positive probability must yield the same expected payoff, while all strategies that lead to lower expected payoffs are not played. Taking all of our constraints together, we are left with therequirementthateachplayerplaysabestresponsetotheotherplayer’smixed strategy: thedefinitionofaNashequilibrium. TheLemke–Howsonalgorithm: agraphicalexposition The best-known algorithm designed to solve this LCP formulation is the Lemke– Lemke–Howson Howsonalgorithm. Wewillexplainitinitiallythroughagraphicalexposition.Conalgorithm sider the game in Figure 4.1.