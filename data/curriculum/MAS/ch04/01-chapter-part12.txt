is effective for the general case as well: one simply reverses the lexicographic ordering between size and balance of supports (SEM first sorts them by size, and then by a measure of balance; in the n-player case we reverse the ordering). The resulting heuristic algorithm performs very well in practice, and betterthanthealgorithmsdiscussedearlier. Weshouldnotethatwhiletheordering betweenbalanceandsizebecomesextremelyimportanttotheefficiencyofthealgorithmasnincreases,thisreverseorderingdoesnotperformsubstantiallyworse thanSEMinthetwo-playercase,becausethesmallestofthebalancedsupportsize profilesstillappearsveryearlyintheordering. 4.4 Computing maxmin and minmax strategies for two-player, generalsum games RecallfromSection3.4.1thatin atwo-player,general-sumgameamaxminstrategyforplayeriisastrategythatmaximizeshisworst-casepayoff,presumingthat the other player j follows the strategy that will cause the greatest harm to i. A minmax strategy for j against i is such a maximum-harm strategy. Maxmin and minmax strategies can be computed in polynomial time because they correspond toNashequilibriumstrategiesinrelatedzero-sumgames. Let G be an arbitrary two-playergame G = ( 1,2 ,A A ,(u ,u )). Let 1 2 1 2 { } × us consider how to compute a maxmin strategy for player 1. It will be useful to define the zero-sum game G′ = ( 1,2 ,A A ,(u , u )), in which player 1 2 1 1 { } × − 1’sutilityfunctionisunchangedandplayer2’sutilityisthenegativeofplayer1’s. Bythe minmaxtheorem(Theorem3.4.4), sinceG′ is zerosumeverystrategyfor player 1 which is part of a Nash equilibrium strategy profile for G′ is a maxmin strategyforplayer1inG′. Noticethatbydefinition,player1’smaxminstrategyis independentofplayer2’sutilityfunction. Thus,player1’smaxminstrategyisthe sameinGandinG′. OurproblemoffindingamaxminstrategyinGthusreduces to finding a Nash equilibrium of G′, a two-player, zero-sum game. We can thus solvetheproblembyapplyingthetechniquesgivenearlierinSection4.1. The computationofminmaxstrategiesfollows the samepattern. We can again usetheminmaxtheoremtoarguethatplayer2’sNashequilibriumstrategyinG′is aminmaxstrategyforhimagainstplayer1inG. (Ifwewantedtocomputeplayer 1’s minmax strategy, we would have to construct another game G′′ where player 1’spayoffis u ,thenegativeofplayer2’spayoffinG.) Thus,bothmaxminand 2 − minmaxstrategiescanbecomputedefficientlyfortwo-playergames. 4.5 Identifying dominated strategies Recallthatonestrategydominatesanotherwhenthefirststrategyisalwaysatleast asgoodasthesecond,regardlessoftheotherplayers’actions. (Section3.4.3gave UncorrectedmanuscriptofMultiagentSystems,publishedbyCambridgeUniversityPress Revision1.1©Shoham&Leyton-Brown,2009,2010. 4.5 Identifyingdominatedstrategies 109 the formal definitions.) In this section we discuss some computational uses for identifying dominated strategies, and consider the computational complexity of thisprocess. Asdiscussedearlier,iteratedremovalofstrictlydominatedstrategiesisconceptuallystraightforward:thesamesetofstrategieswillbeidentifiedregardlessofthe elimination order, and all Nash equilibria of the original game will be contained in this set. Thus, this method can be used to narrow down the set of strategies toconsiderbeforeattemptingto identifyasampleNashequilibrium. Intheworst casethisprocedurewillhavenoeffect—manygameshavenodominatedstrategies. Inpractice,however,itcanmakeabigdifferencetoiterativelyremovedominated strategiesbeforeattemptingtocomputeanequilibrium. Thingsareabittrickierwiththeiteratedremovalofweaklyorveryweaklydominatedstrategies.Inthiscasetheeliminationorderdoesmakeadifference:thesetof strategiesthatsurviveiteratedremovalcandifferdependingontheorderinwhich dominated strategies are removed. As a consequence, removing weakly or very weakly dominated strategies can eliminate some equilibria of the original game. There is still a computational benefit to this technique, however. Since no new equilibria are ever created by this elimination (and since every game has at least one equilibrium), at least one of the original equilibria always survives. This is enoughifallwewanttodoistoidentifyasampleNashequilibrium. Furthermore, iterative removal of weakly or very weakly dominated strategies can eliminate a largersetofstrategiesthaniterativeremovalofstrictlydominatedstrategiesandso willoftenproduceasmallergame. Whatisthecomplexityofdeterminingwhetheragivenstrategycanberemoved? Thisdependsonwhetherweareinterestedincheckingthestrategyfordomination by a pure or mixed strategies, whether we are interested in strict, weak or very weakdomination,andwhetherweareinterestedonlyindominationorinsurvival underiteratedremovalofdominatedstrategies. 4.5.1 Dominationbyapurestrategy Thesimplestcaseischeckingwhethera(notnecessarilypure)strategys forplayer i i is (strictly; weakly; very weakly) dominated by any pure strategy for i. For concreteness,letusconsiderthecaseofstrictdominance.Tosolvetheproblemwe must checkevery pure strategy a for playeri and every pure-strategyprofile for i the other players to determine whether there exists some a for which it is never i weakly better for i to play s instead of a . If so, s is strictly dominated. An i i i algorithmforthiscaseisgiveninFigure4.7. Observethatthisalgorithmworksbecausewedonotneedtocheckeverymixedstrategyprofileoftheotherplayers,eventhoughthedefinitionofdominancerefers to such strategies. Why can we get away with this? If it is the