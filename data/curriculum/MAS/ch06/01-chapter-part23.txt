must make a decision about building her patio before the weather gets too cold. When she makes this decision, she knows whether a tree doctorhas come, but she cannotobservethe health of the tree directly. A MAID forthisscenarioisshowninFigure6.18. PoisonTree TreeSick TreeDoctor BuildPatio TreeDead Cost Tree View Figure 6.18: A multiagent influence diagram. Nodes for Alice are in dark gray, whileBob’sareinlightgray. Chancevariablesarerepresentedas ovals,decisionvariablesas rectangles,and utility variables as diamonds. Each variable has a set of parents, which may be chance variables or decision variables. Each chance node is characterized by a conditionalprobabilitydistribution,whichdefinesadistributionoverthevariable’s domain for each possible instantiation of its parents. Similarly, each utility node recordstheconditionalvalueforthecorrespondingagent. Ifmultipleutilitynodes existforthesameagent,astheydoforinthisexampleforBob,thetotalutilityis simplythesumofthevaluesfromeachnode. Decisionvariablesdifferinthattheir parents(connectedbydottedarrows)arethevariablesthatanagentobserveswhen makinghisdecision. Thisallowsustorepresenttheinformationsetsinacompact way. Foreachdecisionnode,thecorrespondingagentconstructsadecisionrule,which is a distribution overthe domainofthe decisionvariableforeachpossibleinstantiation of this node’s parents. A strategy for an agent consists of a decision rule foreachof his decisionnodes. Since a decisionnodeacts as a chancenodeonce its decision rule is set, we can calculate the expected utility of an agent given a Freeforon-screenuse;pleasedonotdistribute.Youcangetanotherfreecopy ofthisPDFororderthebookathttp://www.masfoundations.org. 194 6 RicherRepresentations:BeyondtheNormalandExtensiveForms strategyprofile. Asyouwouldexpect,astrategyprofileisaNashequilibriumina MAID if no agentcan improve its expectedutility by switching to a differentset ofdecisionrules. ThisexampleshowsseveraloftheadvantagesoftheMAIDrepresentationover the equivalentextensive-formgame representation. Since there are a total of five chanceanddecisionnodesandallvariablesare binary,the gametree wouldhave 32leaves,eachwithavalueforbothagents. IntheMAID,however,weonlyneed fourvaluesforeach agentto fill tables forthe utility nodes. Similarly, redundant chancenodesofthegametreearereplacedbysmallconditionalprobabilitytables. Ingeneral,thespacesavingsofMAIDscanbeexponential(althoughitispossible thatthisrelationshipisreversedifthegametreeissufficientlyasymmetric). ThemostimportantadvantageofMAIDsis thattheyallowmoreefficientalgorithmsforcomputingequilibria,aswewillinformallyshowfortheexample. The efficiency of the algorithm comes from exploiting the property of strategic relestrategic vanceinawaythatisrelatedtobackwardinductioninperfect-informationgames. relevance A decision node D is strategically relevant to another decision node D if, to 2 1 optimize the rule at D , the agent needs to consider the rule at D . We omit a 1 2 formal definition of strategic relevance, but point out that it can be computed in polynomialtime. NodecisionnodesarestrategicallyrelevanttoBuildPatioforAlice,becauseshe observesbothofthedecisionnodes(PoisonTreeandTreeDoctor)thatcouldaffect herutilitybeforeshehastomakethisdecision. Thus,whenfindinganequilibrium, wecanoptimizethisdecisionruleindependentlyoftheothersandeffectivelyconvert it into a chance node. Next, we observe that PoisonTree is not strategically relevanttoTreeDoctor,becauseanyinfluencethatPoisonTreehasonautilitynode forBobmustgothroughTreeSick,whichisaparentofTreeDoctor. Afteroptimizingthisdecisionnode,wecanobviouslyoptimizePoisonTreebyitself,yieldingan equilibriumstrategyprofile. Obviously not all games allow such a convenientdecomposition. However, as long as there exists some subset of the decision nodes such that no node outside ofthissubsetisrelevanttoanynodeinthesubset,thenwecanachievesomecomputational savings by jointly optimizing the decision rules for this subset before tacklingtherestoftheproblem. Usingthisgeneralidea,anequilibriumcanoften befoundexponentiallymorequicklythaninstandardextensive-formgames. AnefficientalgorithmalsoexistsforcomputingEXPECTEDUTILITYforMAIDs. Theorem6.5.13 The EXPECTEDUTILITY problem for MAIDs can be computed intimepolynomialinthesizeoftheMAIDrepresentation. Unfortunately the only known algorithm for efficiently solving EXPECTEDUTILITY in MAIDS uses division and so cannot be directly translated to an arithmetic circuit as required in Theorem 6.5.3, which does not allow division operations. ItisunknownwhethertheproblemoffindingaNashequilibriuminaMAID canbereducedtofindingaNashequilibriuminatwo-playergame. Nevertheless manyotherapplicationsfor computing EXPECTEDUTILITY we discussedin SecUncorrectedmanuscriptofMultiagentSystems,publishedbyCambridgeUniversityPress Revision1.1©Shoham&Leyton-Brown,2009,2010. 6.5 Computationallymotivatedcompactrepresentations 195 tion 6.5.1 apply to MAIDs. For example, the EXPECTEDUTILITY algorithm can be usedas a subroutineto GovindanandWilson’s algorithm forcomputingNash equilibriainextensive-formgames(seeSection4.3). 6.5.5 GALA WhileMAIDsallowustocaptureexactlytherelevantinformationneededtomake adecisionateachpointinthegame,westillneedtoexplicitlyrecordeachchoice pointofthegame. When,insteadofmodelingreal-worldsetting,wearemodeling aboardorcardgame,thistaskwouldberathercumbersome,ifnotimpossible.The keypropertyofthesegamesthatis notbeingexploitedis theirrepetitivenature— thegamealternatesbetweentheopponentswhosepossiblemovesareindependent of the depth of the game tree, and can instead be defined in terms of the current GALA stateofthegameandanunchangingsetofrules. TheProlog-basedlanguageGALA exploitsthisfacttoallowconcisespecificationsoflarge,complexgames. Wepresentthemainideasofthelanguageusingthecodein Figure6.19foran imperfect-informationvariantofTic-Tac-Toe. Eachplayercanmarkasquarewith eitheran“x”oran“o,”buttheopponentseesonlythepositionofthemark,notits type. Aplayerwinsifhismovecreatesalineofthesametypeofmark. game(blind tic tac toe, (1) [ players : [a,b], (2) objects : [grid_board : array(‘$size’, ‘$size’)], (3) params : [size], (4) flow : (take_turns(mark,unless(full),until(win))), (5) mark : (choose(‘$player’, (X, Y, Mark), (6) (empty(X,Y), member(Mark, [x,o]))), (7) reveal(‘$opponent’,(X,Y)), (8) place((X,Y),Mark)), (9) full : (\+(empty( , )) → outcome(draw)), (10)