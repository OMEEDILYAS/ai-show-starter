3 messagefromx , andupdateshis localviewto x = blue,x = red . Atthis 2 1 2 { } point he cannotfind a value from his domain consistent with his local view, and, using hyperresolution, generatesthe Nogood x = blue,x = red . He com1 2 { } municatesthisNogoodtox ,thelowestrankedagentparticipatingintheNogood. 2 x now cannot find a value consistent with his local view, generates the Nogood 2 x = blue , and communicates it to x . x detects the inconsistency with his 1 1 1 { } current value, changes his value to red, and communicates the new value to x 2 andx . Theprocessnowcontinuesas before;x changeshisvaluebackto blue, 3 2 x finds no consistent value and generates the Nogood x = red,x = blue , 3 1 2 { } andthenx generatestheNogood x = red . Atthis pointx hastheNogood 2 1 1 { } x = blue as well as the Nogood x = red , and using hyper-resolutionhe 1 1 { } { } generatestheNogood ,andthealgorithmterminateshavingdeterminedthatthe {} problemhasnosolution. The need for the addition of new edges is seen in a slightly modified example, showninFigure1.5. Asinthepreviousexample,heretoox generatestheNogood x = blue,x = 3 1 2 { red and notifies x . x is not able to regain consistency by changing his own 2 2 } value. However, x is not a neighbor of x , and so x does not have the value 1 2 2 x = blue in his localview and is notable to sendthe Nogood x = blue to 1 1 { } x . Sox sendsarequesttox toaddx tohislistofneighborsandtosendx his 1 2 1 2 2 currentvalue. Fromthereonwardthealgorithmproceedsasbefore. UncorrectedmanuscriptofMultiagentSystems,publishedbyCambridgeUniversityPress Revision1.1©Shoham&Leyton-Brown,2009,2010. 1.3 Heuristicsearchalgorithms 13 X X (cid:31)1 (cid:28) (cid:31)2 (cid:28) {1,2} {2} @ = = (cid:0) @@6 6 (cid:0)(cid:0) (cid:30)(cid:29) (cid:30)(cid:29) (new_val,(X 1 ,1)) @@ (cid:0)(cid:0) (new_val,(X 2 ,2)) @R @ (cid:0) (cid:9)(cid:0) (cid:31) X 3 (cid:28) local_view {1,2} {(X ,1),(X ,2)} 1 2 (cid:30)(a) (cid:29) addneighborrequest (cid:27) X X (cid:31)1 (cid:28) -(cid:31)2 (cid:28) {1,2} newlink {2} @ = = (cid:0) local_view @6 6 (cid:0)(cid:0)(cid:18) (cid:30)(cid:29) (cid:30){(X(cid:29),1)} @ (cid:0)(cid:0) 1 @ (cid:0)(cid:0) (cid:31) X 3 (cid:28) (Nogood,{(X 1 ,1),(X 2 ,2)}) {1,2} (cid:30)(b) (cid:29) (Nogood,{(X ,1)}) 1 X (cid:27) X (cid:31)1 (cid:28) -(cid:31)2 (cid:28) {1,2} {2} @ = = (cid:0) @6 6 (cid:0) (cid:30)(cid:29) (cid:30)(cid:29) @ (cid:0) @ (cid:0) X (cid:31)3 (cid:28) {1,2} (cid:30)(c) (cid:29) Figure1.5: Asynchronousbacktrackingwithdynamiclinkaddition. 1.3.3 Anextendedexample: thefourqueensproblem InordertogainadditionalfeelingfortheABTalgorithmbeyondthedidacticexamplein the previoussection,let uslookatoneofthecanonicalCSP problems: the n-queens problem. More specifically, we will consider the four queens problem, whichaskshowfourqueenscanbeplacedona4 4chessboardsothatnoqueen × can(immediately)attack anyother. We willdescribeABT’s behaviorin termsof cycles of computation, which we somewhatartificially define to be the receiving Freeforon-screenuse;pleasedonotdistribute.Youcangetanotherfreecopy ofthisPDFororderthebookathttp://www.masfoundations.org. 14 1 DistributedConstraintSatisfaction (cid:68)(cid:52) (cid:68)(cid:52) OK? (cid:68)(cid:53) (cid:68)(cid:53) ?KO ?KO (cid:68)(cid:54) OK? OK? (cid:68)(cid:54) OK? OK? OK? OK? OK? OK? OK? (cid:68)(cid:55) (cid:68)(cid:55) NoOgoKo?d OK? OK? Figure 1.6: Cycle 1 of ABT for four Figure 1.7: Cycle 2 of ABT for four queens. Allagentsareactive. queens. A ,A andA areactive. The 2 3 4 Nogood message is A = 1 A = 1 2 ∧ 1 A = 1. 3 → 6 ofmessages,thecomputationstriggeredbyreceivedmessages,andthesendingof messagesduetothesecomputations.