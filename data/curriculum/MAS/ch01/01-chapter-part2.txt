D D . Each such constraint i1 × ··· × ij restrictsthevaluesthatmaybesimultaneouslyassignedtothevariablesparticipatingintheconstraint. Inthischapterwerestrictthediscussiontobinaryconstraints, eachofwhichconstrainsexactlytwovariables. Forexample,inthemap-coloring case,each“not-equal”constraintappliedtotwonodes. Given a subset S of the variables, an instantiation of S is an assignment of a unique domain value for each variable in S; it is legal if it does not violate any constraint that mentions only variables in S. A solution to a network is a legal instantiationofallvariables. Typicaltasksassociatedwithconstraintnetworksare to determine whether a solution exists, to find one or all solutions, to determine whetheralegalinstantiationofsomeofthevariablescanbeextendedtoasolution, and so on. We will concentrate on the most common task, which is to find one solutiontoaCSP,ortoprovethatnoneexists. In a distributed CSP, each variable is owned by a different agent. The goal is stilltofindaglobalvariableassignmentthatmeetstheconstraints,buteachagent decides on the value of his own variable with relative autonomy. While he does not have a global view, each agent can communicate with his neighbors in the constraintgraph. AdistributedalgorithmforsolvingaCSPhaseachagentengage in some protocol that combines local computation with communication with his neighbors. A good algorithm ensures that such a process terminates with a legal solution(orwitharealizationthatnolegalsolutionexists)anddoessoquickly. Wediscusstwotypesofalgorithms. Algorithmsofthefirstkindembodyaleastcommitmentapproachandattempt to rule outimpossible variablevalues without losinganypossiblesolutions.Algorithmsofthesecondkindembodyamoreadventurousspiritandselecttentativevariablevalues,backtrackingwhenthosechoices prove unsuccessful. In both cases we assume that the communication between neighboringnodesisperfect,butnothingaboutitstiming;messagescantakemore orlesstimewithoutrhymeorreason. Wedoassume,however,thatifnodeisends multiplemessagestonodej,thosemessagesarriveintheorderinwhichtheywere sent. 1.2 Domain-pruning algorithms Underdomain-pruningalgorithms,nodescommunicatewiththeirneighborsinorderto eliminate valuesfrom theirdomains. We considertwo suchalgorithms. In filtering the first, the filtering algorithm, each node communicatesits domain to its neighalgorithm bors,eliminatesfromits domainthevaluesthatarenotconsistentwiththevalues received from the neighbors, and the process repeats. Specifically, each node x i UncorrectedmanuscriptofMultiagentSystems,publishedbyCambridgeUniversityPress Revision1.1©Shoham&Leyton-Brown,2009,2010. 1.2 Domain-pruningalgorithms 5 with domain D repeatedlyexecutesthe procedureRevise(x ,x ) foreach neighi i j borx . j procedureRevise(x ,x ) i j forallv D do i i ∈ ifthereisnovaluev D suchthatv isconsistentwithv then j j i j ∈ deletev fromD i i arcconsistency The process, known also under the general term arc consistency, terminates when no further elimination takes place, or when one of the domains becomes empty(inwhichcasetheproblemhasnosolution). Iftheprocessterminateswith onevalueineachdomain,thatsetofvaluesconstitutesasolution. Ifitterminates withmultiplevaluesineachdomain,theresultisinconclusive;theproblemmight ormightnothaveasolution. Clearly,thealgorithmisguaranteedtoterminate,andfurthermoreitissound(in thatifitannouncesasolution,orannouncesthatnosolutionexists,itiscorrect),but itis notcomplete(i.e.,itmayfailtopronounceaverdict). Consider,forexample, thefamilyofverysimplegraph-coloringproblemsshowninFigure1.4. (Notethat problem(d)isidenticaltotheprobleminFigure1.3.) {red} {red} X X (cid:15)1(cid:12) (cid:15)1(cid:12) (cid:19)(cid:19) S (cid:19)(cid:19) S = (cid:19) (cid:14)(cid:13)S = = (cid:19) (cid:14)(cid:13)S = (a) (b) 6 (cid:19) S6 6 (cid:19) S6 (cid:19) S (cid:19) S (cid:19) SS (cid:19) SS X X X X (cid:15)2(cid:12) = (cid:15)3(cid:12) (cid:15)2(cid:12) = (cid:15)3(cid:12) {red,blue} {red,blue,green} {red,blue} {red,blue} 6 6 (cid:14)(cid:13) (cid:14)(cid:13) (cid:14)(cid:13) (cid:14)(cid:13) {red,blue} {red,blue,green} X X (cid:15)1(cid:12) (cid:15)1(cid:12) (cid:19)(cid:19) S (cid:19)(cid:19) S = (cid:19) (cid:14)(cid:13)S = = (cid:19) (cid:14)(cid:13)S = (c) (d) 6 (cid:19) S6 6 (cid:19) S6 (cid:19) S (cid:19) S (cid:19) SS (cid:19) SS X X X X (cid:15)2(cid:12) = (cid:15)3(cid:12) (cid:15)2(cid:12) = (cid:15)3(cid:12) {red,blue} {red,blue} {red,blue,green} {red,blue,green} 6 6 (cid:14)(cid:13) (cid:14)(cid:13) (cid:14)(cid:13) (cid:14)(cid:13) Figure1.4: Afamilyofgraphcoloringproblems InthisfamilyofCSPs thethreevariables(i.e.,nodes)arefixed,asarethe“notFreeforon-screenuse;pleasedonotdistribute.Youcangetanotherfreecopy ofthisPDFororderthebookathttp://www.masfoundations.org. 6 1 DistributedConstraintSatisfaction equal” constraints between them. What are not fixed are the domains of the variables. ConsiderthefourinstancesofFigure1.4. (a) Initially, as the nodes communicate with one another, only x ’s messages 1 result in any change. Specifically, when either x or x receive x ’s message 2 3 1 theyremoveredfromtheirdomains,endingupwithD = blue andD = 2 3 { } blue,green . Then,whenx communicateshisnewdomaintox ,x further 2 3 3 { } reduceshisdomainto green .